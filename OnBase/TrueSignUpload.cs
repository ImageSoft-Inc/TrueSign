// Skeleton generated by Hyland Unity Editor on 2/14/2020 5:09:53 PM
namespace TrueSignNextUpload
{
    using System;
    using System.Text;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using Hyland.Unity.Workflow;
    using TrueSignNextLibrary;

    /// <summary>
    /// TrueSign Next Upload
    /// </summary>
    public class TrueSignNextUpload : Hyland.Unity.IWorkflowScript
    {
        #region IWorkflowScript
        /// <summary>
        /// Implementation of <see cref="IWorkflowScript.OnWorkflowScriptExecute" />.
        /// <seealso cref="IWorkflowScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnWorkflowScriptExecute(Hyland.Unity.Application app, Hyland.Unity.WorkflowEventArgs args)
        {
            bool result = true;
            try
            {
                Guid Envelope_Id = Guid.Empty;
                string propEnvId = "";
                string clientId = "";
                string clientSecret = "";
                string title = "";
                string email = "";
                string first = "";
                string last = "";
                bool external = false;

                args.SessionPropertyBag.TryGetValue("TrueSignClientId", out clientId);
                args.SessionPropertyBag.TryGetValue("TrueSignClientSecret", out clientSecret);

                TrueSignNext TrueSign = new TrueSignNext(app, clientId, clientSecret);

                if (!args.SessionPropertyBag.TryGetValue("TrueSignEnvelopeId", out propEnvId))
                {
                    args.SessionPropertyBag.TryGetValue("TrueSignTitle", out title);
                    args.SessionPropertyBag.TryGetValue("TrueSignEmail", out email);

                    if (string.IsNullOrEmpty(email))
                    {
                        email = app.CurrentUser.EmailAddress;
                        external = false;
                    }

                    if (string.IsNullOrEmpty(title))
                        title = "OnBase Sync Envelope " + DateTime.Now.ToString("hh:mm");

                    var contact = new Contact();
                    contact.Title = "ImageSoft County Court";
                    contact.Email = "help@court.gov";
                    contact.Phone = "(313) 555 - 5555";

                    var env = TrueSign.CreateEnvelope(title, null, null, contact);
                    if (env == null)
                        throw new Exception("Failed to create a new envelope");

                    Envelope_Id = env.Id;
                    args.SessionPropertyBag.Set("TrueSignEnvelopeId", Envelope_Id.ToString());
                }
                else
                    Envelope_Id = Guid.Parse(propEnvId);

                var doc = TrueSign.AddToEnvelope(Envelope_Id, args.Document);
                if (doc == null)
                    throw new Exception("Failed to add dcosument to envelope");

                app.Diagnostics.Write("Remaining docs: " + args.BatchDocumentsRemaining);
                if (args.BatchDocumentsRemaining == 0)
                {
                    args.SessionPropertyBag.TryGetValue("TrueSignFirst", out first);
                    args.SessionPropertyBag.TryGetValue("TrueSignLast", out last);
                    args.SessionPropertyBag.TryGetValue("TrueSignExternal", out external);

                    Signer_Dto signer = new Signer_Dto();
                    signer.Email = email;
                    signer.First_Name = first; //not needed for internal signer
                    signer.Last_Name = last; //not needed for internal signer

                    if (external)
                    {
                        Access_Code code = new Access_Code();
                        code.Description = "Enter 123";
                        code.Value = "123";
                        TrueSign.AddExternalSigner(Envelope_Id, signer, code);
                    }
                    else
                        TrueSign.AddInternalSigner(Envelope_Id, signer.Email);

                    TrueSign.CloseEnvelope(Envelope_Id);
                }
            }
            catch (Exception ex)
            {
                app.Diagnostics.Write(ex);
                result = false;
                args.PropertyBag.Set("error", ex.Message);
            }
            args.ScriptResult = result;
        }
        #endregion
    }
}